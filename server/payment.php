<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
session_start();

$cardToken = $_POST['cko_card_token'];
$preferredScheme = $_POST['preferred_scheme'];
$accessToken = $_POST['access_token'];

$apiUrl = "https://api.sandbox.checkout.com/payments/";

// POST Payment request
$paymentCurl = curl_init();

$requestBody = array(
    'source' => array(
        'type' => 'token',
        'token' => $cardToken, // generated by Checkout.Frames
    ),
    'processing'=> array(
        'preferred_scheme' => $preferredScheme
    ),
    'amount' => '2499',
    'currency' => 'EUR',
    'reference' => 'XYZ NAS CB TEST'
);

curl_setopt($paymentCurl, CURLOPT_URL, $apiUrl);
curl_setopt($paymentCurl, CURLOPT_POST, true);
$authorization = 'Authorization: Bearer '.$accessToken; // Prepare the authorisation token
$headers = array('Content-Type: application/json' , $authorization ); // Inject the token into the header
curl_setopt($paymentCurl, CURLOPT_HTTPHEADER, $headers);
curl_setopt($paymentCurl, CURLOPT_POSTFIELDS, json_encode($requestBody));
curl_setopt($paymentCurl, CURLOPT_RETURNTRANSFER, true);
// Add option to capture the error response
curl_setopt($paymentCurl, CURLOPT_FAILONERROR, true);

$server_output = curl_exec($paymentCurl);

// Check for error
if (curl_errno($paymentCurl)) {
    $error = curl_error($paymentCurl);
}
// Display results
if (isset($error)) {
    echo $error;
} else {
    echo $server_output;
}

// The payment response
$response = json_decode($server_output);

// Print payment response to screen
echo('<pre>'.print_r($response, true).'</pre>');

curl_close ($paymentCurl);

exit();

